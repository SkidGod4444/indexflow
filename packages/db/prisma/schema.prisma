
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          String?     @default("user")
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  servers       Server[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Server {
  id            String @id
  name          String
  owner      User?     @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  owner_id      String
  isConfigured Boolean
  config_id    String
  logo         String?
  invite_url   String?
  configs      Configs?
  createdAt     DateTime
  updatedAt     DateTime

  @@unique([id])
}

model Configs {
  id String @id
  server_id String @unique
  server Server?     @relation(fields: [server_id], references: [id], onDelete: Cascade)
  qna_channels String[]
  qna_channel_webhooks String[]
  qna_endpoint String?
  mod_role String?
  log_channel String?
  log_channel_webhook String?
}